<!--
*********************************************************************
* Copyright (c) Intel Corporation 2022
* SPDX-License-Identifier: Apache-2.0
**********************************************************************
-->

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WSMan Message Test UI</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Pacifico&display=swap');

    body {
      margin: 0;
      box-sizing: border-box;
    }

    .container {
      line-height: 150%;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px;
      background-color: #e9e9e9;
    }

    .header h1 {
      color: #222222;
      font-size: 30px;
    }

    .header .social a {
      padding: 0 5px;
      color: #222222;
    }

    .content {
      margin-left: 20px;
      padding: 1em;
      overflow: hidden;
    }

    .footer {
      padding: 10px 20px;
      background-color: #2e3550;
      color: white;
      text-align: center;
    }

    .xml {
      height: 200px;
      width: 500px;
    }

    form {
      display: table;
    }

    p {
      display: table-row;
    }

    input,
    select,
    label,
    textarea {
      display: table-cell;
      width: 200px;
      vertical-align: middle;
    }

    h4 {
      display: inline;
      margin-right: 70px;
    }
  </style>
</head>
<script>
  // const methods = {
  //   default: { value: 'Select Method', view: [{ parameters: 'hidden' }] },
  //   get: { value: 'GET', view: { parameters: 'hidden' } },
  //   put: { value: 'PUT', view: { parameters: 'visible' } },
  //   enumerate: { value: 'ENUMERATE', view: { parameters: 'hidden' } },
  //   pull: { value: 'PULL', view: { parameters: 'visible' } }
  // }

  // const apiCalls = {
  //   default: { 
  //     value: 'Select API Call', 
  //     class: 'default', 
  //     view: { method: 'hidden', xmlTransmit: 'hidden', xmlReceive: 'hidden', submit: 'hidden' },
  //     enabledMethods: []
  //   },
  //   GeneralSettings: { 
  //     value: 'General Settings',
  //     class: 'GeneralSettings',
  //     view: { method: 'visible', xmlTransmit: 'visible', xmlReceive: 'visible', submit: 'visible' },
  //     enabledMethods: [ methods.default, methods.get, methods.put ]
  //   }
  // }

  let Messages = null
  let globalAPICalls
  let currentAPI
  let currentMethod
  const ServerPost = 'http://localhost:3000/'

  function pageLoad() {
    getClasses()
  }

  function loadAPICallList(apiCalls) {
    globalAPICalls = apiCalls
    let apiCallList = document.getElementById('apiCallList')
    apiCallList.options[apiCallList.options.length] = new Option('Select API Call', 'default', true, true)
    for (let item in globalAPICalls) {
      apiCallList.options[apiCallList.options.length] = new Option(item, item)
    }
  }

  function loadMethodCalls(apiCall) {
    let methodList = document.getElementById('methodList')
    let options = methodList.getElementsByTagName('option')
    for (var i = options.length; i--;) {
      methodList.removeChild(options[i])
    }
    methodList.options[methodList.options.length] = new Option('Select Method', 'default', true, true)
    globalAPICalls[apiCall].Methods.forEach(element => {
      methodList.options[methodList.options.length] = new Option(element, element)
    })
  }

  
  function apiCallChange(selectedValue) {
    currentAPI = selectedValue.value
    if (currentAPI === 'default') { return }
    loadMethodCalls(currentAPI)
  }

  function methodChange(selectedValue) {
    currentMethod = selectedValue.value
    if (currentMethod === 'default') { return }
    let messageObj = {
      api: currentAPI,
      method: currentMethod
    }
    httpRequest('POST', 'wsman', messageObj)
  }

  function getClasses() {
    httpRequest('GET', 'classes', '')
  }

  function httpRequest(method, route, message) {
    const xhr = new XMLHttpRequest()
    xhr.open(method, ServerPost + route)
    xhr.setRequestHeader('Content-type', 'application/json')
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4 && xhr.status === 200) {
        processHttpResponse(xhr.response, route)
      }
    }
    xhr.send(JSON.stringify(message))
  }

  function processHttpResponse(response, route) {
    switch (route) {
      case 'classes':
        loadAPICallList(JSON.parse(response))
        break
      case 'wsman':
        populateXMLTransmit(response)
        break
      default:
        console.error('unknown route')
    }
  }

  function populateXMLTransmit(xmlMessage) {
    let tbXMLTransmit = document.getElementById('tbXMLTransmit')
    tbXMLTransmit.value = xmlMessage
  }

</script>

<body onload="pageLoad()">
  <div class="container">
    <header class="header">
      <h1>WSMan Message Test UI</h1>
    </header>
    <main class="content">
      <form>
        <p><label>Host:</label><input type="text" name="host" value="localhost"></p>
        <p><label>Port:</label><input type="text" name="port" value="16992"></p>
        <p><label>Username:</label><input type="text" name="username" value="admin"></p>
        <p><label>Password:</label><input type="password" name="password" value=""></p>
        <p><label>API Call:</label><select id="apiCallList" onchange="apiCallChange(this)"></select></p>
        <p id="method" style="visibility: visible;"><label>Method:</label><select id="methodList"
            onchange="methodChange(this)"></select></p>
        <p id="parameters" style="visibility: visible;"></p>
        <p id="xmlTransmit" style="visibility: visible;"><label>XML Transmit:</label><textarea id="tbXMLTransmit"
            name="xml" class="xml" value="" rows="10" cols="80"></textarea></p>
        <p><label></label><button id="submit" type="button" style="float: right; visibility: visible;"
            onclick="send(this)">Submit</button></p>
        <p id="xmlReceive" style="visibility: visible;"><label>XML Received:</label><textarea id="tbXMLReceive"
            class="xml" rows="10" cols="80"></textarea></p>
      </form>
    </main>
    <footer class="footer">&copy; Copyright Intel&reg; Corporation</footer>
  </div>
</body>

</html>